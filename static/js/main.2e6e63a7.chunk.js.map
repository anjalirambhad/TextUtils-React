{"version":3,"sources":["components/TF.js","App.js","reportWebVitals.js","index.js"],"names":["TF","props","text","setText","useState","React","createElement","Fragment","className","style","color","mode","heading","value","onChange","event","target","backgroundColor","id","rows","onClick","handleUpClick","newText","toUpperCase","showAlert","handleLwClick","toLowerCase","handleClearClick","handleCopyClick","document","getElementById","select","navigator","clipboard","writeText","handleReverseClick","split","reverse","join","filter","element","length","App","setMode","alert","setAlert","message","type","msg","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"0LAGe,SAASA,EAAGC,GACvB,MA6BOC,EAAMC,GAAWC,mBAAS,IACjC,OACIC,IAAAC,cAAAD,IAAAE,SAAA,KACIF,IAAAC,cAAA,OAAKE,UAAU,YAAYC,MAAO,CAAEC,MAAsB,SAAfT,EAAMU,KAAkB,QAAU,WACzEN,IAAAC,cAAA,UAAKL,EAAMW,SACXP,IAAAC,cAAA,OAAKE,UAAU,QACXH,IAAAC,cAAA,YAAUE,UAAU,eAAeK,MAAOX,EAAMY,SATxCC,IACpBZ,EAAQY,EAAMC,OAAOH,QAQiEJ,MAAO,CAAEQ,gBAC/E,SADgGhB,EAAMU,KAC7F,OAAS,QAASD,MAAsB,SAAfT,EAAMU,KAAkB,QAAU,WAAaO,GAAG,QAAQC,KAAK,OAEzGd,IAAAC,cAAA,UAAQE,UAAU,uBAAuBY,QAtC/BC,KAClB,IAAIC,EAAUpB,EAAKqB,cACnBpB,EAAQmB,GACRrB,EAAMuB,UAAU,0BAA0B,aAmC+B,wBACjEnB,IAAAC,cAAA,UAAQE,UAAU,uBAAuBY,QAlC/BK,KAClB,IAAIH,EAAUpB,EAAKwB,cACnBvB,EAAQmB,GACRrB,EAAMuB,UAAU,0BAA0B,aA+B+B,wBACjEnB,IAAAC,cAAA,UAAQE,UAAU,uBAAuBY,QA9B5BO,KAErBxB,EADc,IAEdF,EAAMuB,UAAU,mBAAmB,aA2ByC,cACpEnB,IAAAC,cAAA,UAAQE,UAAU,uBAAuBY,QArB7BQ,KACpB,IAAI1B,EAAO2B,SAASC,eAAe,SACnC5B,EAAK6B,SACLC,UAAUC,UAAUC,UAAUhC,EAAKW,OACnCZ,EAAMuB,UAAU,uBAAuB,aAiBoC,aACnEnB,IAAAC,cAAA,UAAQE,UAAU,uBAAuBY,QA3B1Be,KACvB,IAAIb,EAAUpB,EAAKkC,MAAM,IAAIC,UAAUC,KAAK,IAC5CnC,EAAQmB,GACRrB,EAAMuB,UAAU,oBAAoB,aAwB0C,iBAE1EnB,IAAAC,cAAA,OAAKE,UAAU,iBAAiBC,MAAO,CAAEC,MAAsB,SAAfT,EAAMU,KAAkB,QAAU,YAC9EN,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAIJ,EAAKkC,MAAM,OAAOG,OAAQC,GAAmC,IAAjBA,EAAQC,QAAaA,OAAO,cAAYvC,EAAKuC,OAAO,eACpGpC,IAAAC,cAAA,SAAI,KAAQJ,EAAKkC,MAAM,KAAKK,OAAO,iBACnCpC,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAIJ,EAAKuC,OAAS,EAAIvC,EAAO,wBCD9BwC,MA5Cf,WACE,MAAO/B,EAAMgC,GAAWvC,mBAAS,UAC1BwC,EAAOC,GAAYzC,mBAAS,MAE7BoB,EAAYA,CAACsB,EAASC,KAC1BF,EAAS,CACPG,IAAKF,EACLC,KAAMA,IAERE,WAAW,KACTJ,EAAS,OACR,OAeL,OACExC,IAAAC,cAAAD,IAAAE,SAAA,KAQUF,IAAAC,cAACN,EAAE,CAACwB,UAAWA,EAAWZ,QAAQ,0BAA0BD,KAAMA,MC/BjEuC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWnC,SAASC,eAAe,SACpDmC,OACH5D,IAAAC,cAACD,IAAM6D,WAAU,KACf7D,IAAAC,cAACoC,EAAG,QAORQ","file":"static/js/main.2e6e63a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nexport default function TF(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n    }\r\n    const handleLwClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text is cleared!\",\"success\");\r\n    }\r\n    const handleReverseClick = () => {\r\n        let newText = text.split('').reverse().join('');\r\n        setText(newText);\r\n        props.showAlert(\"Text is reversed!\",\"success\");\r\n    }\r\n    const handleCopyClick = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard!\",\"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : '#04273' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === \r\n                        'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLwClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleReverseClick}>Reverse Text</button>\r\n            </div>\r\n            <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Nothing to preview'}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TF from './components/TF';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/* <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route path=\"/about\" element={<About />} /> */}\n            {/* <Route path=\"/\" element={ */}\n              <TF showAlert={showAlert} heading=\"Enter text to analyse: \" mode={mode} />\n              {/* } /> */}\n          {/* {/* </Routes>\n        </div>\n      </Router> */}\n    </> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}